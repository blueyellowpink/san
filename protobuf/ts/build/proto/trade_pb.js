"use strict";
// source: proto/trade.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var proto_order_pb = require('../proto/order_pb.js');
goog.object.extend(proto, proto_order_pb);
goog.exportSymbol('proto.trade.MatchedOrder', null, global);
goog.exportSymbol('proto.trade.MatchedPair', null, global);
goog.exportSymbol('proto.trade.Trade', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.Trade = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.Trade.repeatedFields_, null);
};
goog.inherits(proto.trade.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.trade.Trade.displayName = 'proto.trade.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MatchedPair = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.trade.MatchedPair.repeatedFields_, null);
};
goog.inherits(proto.trade.MatchedPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.trade.MatchedPair.displayName = 'proto.trade.MatchedPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trade.MatchedOrder = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trade.MatchedOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.trade.MatchedOrder.displayName = 'proto.trade.MatchedOrder';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.Trade.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.trade.Trade.prototype.toObject = function (opt_includeInstance) {
        return proto.trade.Trade.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.trade.Trade} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.trade.Trade.toObject = function (includeInstance, msg) {
        var f, obj = {
            initSide: jspb.Message.getFieldWithDefault(msg, 1, 0),
            initType: jspb.Message.getFieldWithDefault(msg, 2, 0),
            tradesList: jspb.Message.toObjectList(msg.getTradesList(), proto.trade.MatchedPair.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.Trade}
 */
proto.trade.Trade.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.trade.Trade;
    return proto.trade.Trade.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.Trade}
 */
proto.trade.Trade.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.order.OrderSide} */ (reader.readEnum());
                msg.setInitSide(value);
                break;
            case 2:
                var value = /** @type {!proto.order.OrderType} */ (reader.readEnum());
                msg.setInitType(value);
                break;
            case 3:
                var value = new proto.trade.MatchedPair;
                reader.readMessage(value, proto.trade.MatchedPair.deserializeBinaryFromReader);
                msg.addTrades(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.Trade.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.trade.Trade.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.Trade.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getInitSide();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getInitType();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
    f = message.getTradesList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.trade.MatchedPair.serializeBinaryToWriter);
    }
};
/**
 * optional order.OrderSide init_side = 1;
 * @return {!proto.order.OrderSide}
 */
proto.trade.Trade.prototype.getInitSide = function () {
    return /** @type {!proto.order.OrderSide} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {!proto.order.OrderSide} value
 * @return {!proto.trade.Trade} returns this
 */
proto.trade.Trade.prototype.setInitSide = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional order.OrderType init_type = 2;
 * @return {!proto.order.OrderType}
 */
proto.trade.Trade.prototype.getInitType = function () {
    return /** @type {!proto.order.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {!proto.order.OrderType} value
 * @return {!proto.trade.Trade} returns this
 */
proto.trade.Trade.prototype.setInitType = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * repeated MatchedPair trades = 3;
 * @return {!Array<!proto.trade.MatchedPair>}
 */
proto.trade.Trade.prototype.getTradesList = function () {
    return /** @type{!Array<!proto.trade.MatchedPair>} */ (jspb.Message.getRepeatedWrapperField(this, proto.trade.MatchedPair, 3));
};
/**
 * @param {!Array<!proto.trade.MatchedPair>} value
 * @return {!proto.trade.Trade} returns this
*/
proto.trade.Trade.prototype.setTradesList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.trade.MatchedPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.MatchedPair}
 */
proto.trade.Trade.prototype.addTrades = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.trade.MatchedPair, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.Trade} returns this
 */
proto.trade.Trade.prototype.clearTradesList = function () {
    return this.setTradesList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trade.MatchedPair.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.trade.MatchedPair.prototype.toObject = function (opt_includeInstance) {
        return proto.trade.MatchedPair.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.trade.MatchedPair} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.trade.MatchedPair.toObject = function (includeInstance, msg) {
        var f, obj = {
            price: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
            initOrder: (f = msg.getInitOrder()) && proto.trade.MatchedOrder.toObject(includeInstance, f),
            matchedOrdersList: jspb.Message.toObjectList(msg.getMatchedOrdersList(), proto.trade.MatchedOrder.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MatchedPair}
 */
proto.trade.MatchedPair.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.trade.MatchedPair;
    return proto.trade.MatchedPair.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MatchedPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MatchedPair}
 */
proto.trade.MatchedPair.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setPrice(value);
                break;
            case 2:
                var value = new proto.trade.MatchedOrder;
                reader.readMessage(value, proto.trade.MatchedOrder.deserializeBinaryFromReader);
                msg.setInitOrder(value);
                break;
            case 3:
                var value = new proto.trade.MatchedOrder;
                reader.readMessage(value, proto.trade.MatchedOrder.deserializeBinaryFromReader);
                msg.addMatchedOrders(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MatchedPair.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.trade.MatchedPair.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MatchedPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MatchedPair.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPrice();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
    f = message.getInitOrder();
    if (f != null) {
        writer.writeMessage(2, f, proto.trade.MatchedOrder.serializeBinaryToWriter);
    }
    f = message.getMatchedOrdersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.trade.MatchedOrder.serializeBinaryToWriter);
    }
};
/**
 * optional double price = 1;
 * @return {number}
 */
proto.trade.MatchedPair.prototype.getPrice = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.trade.MatchedPair} returns this
 */
proto.trade.MatchedPair.prototype.setPrice = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};
/**
 * optional MatchedOrder init_order = 2;
 * @return {?proto.trade.MatchedOrder}
 */
proto.trade.MatchedPair.prototype.getInitOrder = function () {
    return /** @type{?proto.trade.MatchedOrder} */ (jspb.Message.getWrapperField(this, proto.trade.MatchedOrder, 2));
};
/**
 * @param {?proto.trade.MatchedOrder|undefined} value
 * @return {!proto.trade.MatchedPair} returns this
*/
proto.trade.MatchedPair.prototype.setInitOrder = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.trade.MatchedPair} returns this
 */
proto.trade.MatchedPair.prototype.clearInitOrder = function () {
    return this.setInitOrder(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.trade.MatchedPair.prototype.hasInitOrder = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * repeated MatchedOrder matched_orders = 3;
 * @return {!Array<!proto.trade.MatchedOrder>}
 */
proto.trade.MatchedPair.prototype.getMatchedOrdersList = function () {
    return /** @type{!Array<!proto.trade.MatchedOrder>} */ (jspb.Message.getRepeatedWrapperField(this, proto.trade.MatchedOrder, 3));
};
/**
 * @param {!Array<!proto.trade.MatchedOrder>} value
 * @return {!proto.trade.MatchedPair} returns this
*/
proto.trade.MatchedPair.prototype.setMatchedOrdersList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 3, value);
};
/**
 * @param {!proto.trade.MatchedOrder=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trade.MatchedOrder}
 */
proto.trade.MatchedPair.prototype.addMatchedOrders = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.trade.MatchedOrder, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.trade.MatchedPair} returns this
 */
proto.trade.MatchedPair.prototype.clearMatchedOrdersList = function () {
    return this.setMatchedOrdersList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.trade.MatchedOrder.prototype.toObject = function (opt_includeInstance) {
        return proto.trade.MatchedOrder.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.trade.MatchedOrder} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.trade.MatchedOrder.toObject = function (includeInstance, msg) {
        var f, obj = {
            orderId: jspb.Message.getFieldWithDefault(msg, 1, 0),
            accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
            amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trade.MatchedOrder}
 */
proto.trade.MatchedOrder.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.trade.MatchedOrder;
    return proto.trade.MatchedOrder.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trade.MatchedOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trade.MatchedOrder}
 */
proto.trade.MatchedOrder.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setOrderId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAccountId(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setAmount(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trade.MatchedOrder.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.trade.MatchedOrder.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trade.MatchedOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trade.MatchedOrder.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getOrderId();
    if (f !== 0) {
        writer.writeUint32(1, f);
    }
    f = message.getAccountId();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getAmount();
    if (f !== 0.0) {
        writer.writeDouble(3, f);
    }
};
/**
 * optional uint32 order_id = 1;
 * @return {number}
 */
proto.trade.MatchedOrder.prototype.getOrderId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.trade.MatchedOrder} returns this
 */
proto.trade.MatchedOrder.prototype.setOrderId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.trade.MatchedOrder.prototype.getAccountId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.trade.MatchedOrder} returns this
 */
proto.trade.MatchedOrder.prototype.setAccountId = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional double amount = 3;
 * @return {number}
 */
proto.trade.MatchedOrder.prototype.getAmount = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.trade.MatchedOrder} returns this
 */
proto.trade.MatchedOrder.prototype.setAmount = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};
goog.object.extend(exports, proto.trade);
//# sourceMappingURL=trade_pb.js.map